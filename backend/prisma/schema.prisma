// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int          @id @default(autoincrement())
  email     String       @unique
  username  String       @unique
  password  String
  profile   UserProfile?
  posts     Post[]
  comments  Comment[]
  likes     Like[]
  followers Follower[]   @relation("UserFollowers")
  following Follower[]   @relation("UserFollowing")
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  isActive  Boolean      @default(true)
}

model UserProfile {
  id        Int         @id @default(autoincrement())
  userId    Int         @unique
  user      User        @relation(fields: [userId], references: [id])
  firstName String?
  lastName  String?
  bio       String?
  images    UserImage[]
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
}

model UserImage {
  id        Int         @id @default(autoincrement())
  profileId Int
  profile   UserProfile @relation(fields: [profileId], references: [id])
  type      String
  url       String
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
}

model Post {
  id        Int       @id @default(autoincrement())
  title     String 
  content   String
  image_url String?
  published Boolean   @default(false)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  userId    Int
  user      User      @relation(fields: [userId], references: [id])
  comments  Comment[]
  likes     Like[]
}

model Comment {
  id        Int      @id @default(autoincrement())
  content   String
  userId    Int
  postId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
  post      Post     @relation(fields: [postId], references: [id])
}

model Like {
  id        Int      @id @default(autoincrement())
  userId    Int
  postId    Int
  createdAt DateTime @default(now())
  post      Post     @relation(fields: [postId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@unique([userId, postId])
}

model Follower {
  id             Int      @id @default(autoincrement())
  userId         Int
  followerUserId Int
  createdAt      DateTime @default(now())
  user           User     @relation("UserFollowers", fields: [userId], references: [id])
  followerUser   User     @relation("UserFollowing", fields: [followerUserId], references: [id])

  @@unique([userId, followerUserId])
}
